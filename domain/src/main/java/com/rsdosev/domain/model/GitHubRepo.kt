package com.rsdosev.domain.model

import com.google.gson.annotations.SerializedName

data class GitHubRepo(
    val archive_url: String,
    val archived: Boolean,
    val assignees_url: String,
    val blobs_url: String,
    val branches_url: String,
    val clone_url: String,
    val collaborators_url: String,
    val comments_url: String,
    val commits_url: String,
    val compare_url: String,
    val contents_url: String,
    val contributors_url: String,
    val created_at: String,
    val default_branch: String,
    val deployments_url: String,
    val description: String?,
    val disabled: Boolean,
    val downloads_url: String,
    val events_url: String,
    val fork: Boolean,
    val forks: Int,
    val forks_count: Int,
    val forks_url: String,
    val full_name: String,
    val git_commits_url: String,
    val git_refs_url: String,
    val git_tags_url: String,
    val git_url: String,
    val has_downloads: Boolean,
    val has_issues: Boolean,
    val has_pages: Boolean,
    val has_projects: Boolean,
    val has_wiki: Boolean,
    val homepage: String,
    val hooks_url: String,
    val html_url: String,
    val id: Int,
    val issue_comment_url: String,
    val issue_events_url: String,
    val issues_url: String,
    val keys_url: String,
    val labels_url: String,
    val language: Any,
    val languages_url: String,
    val license: Any,
    val merges_url: String,
    val milestones_url: String,
    val mirror_url: Any,
    val name: String,
    val node_id: String,
    val notifications_url: String,
    val open_issues: Int,
    val open_issues_count: Int,
    val owner: Owner,
    val permissions: Permissions,
    val `private`: Boolean,
    val pulls_url: String,
    val pushed_at: String,
    val releases_url: String,
    val size: Int,
    val ssh_url: String,
    val stargazers_count: Int,
    val stargazers_url: String,
    val statuses_url: String,
    val subscribers_url: String,
    val subscription_url: String,
    val svn_url: String,
    val tags_url: String,
    val teams_url: String,
    val trees_url: String,
    val updated_at: String,
    val url: String,
    val watchers: Int,
    val watchers_count: Int
) {
    companion object {
        val dummyRepo1 = GitHubRepo(
            archive_url = "",
            archived = false,
            assignees_url = "",
            blobs_url = "",
            branches_url = "",
            clone_url = "",
            collaborators_url = "",
            comments_url = "",
            commits_url = "",
            compare_url = "",
            contents_url = "",
            contributors_url = "",
            created_at = "",
            default_branch = "",
            deployments_url = "",
            description = "No description",
            disabled = false,
            downloads_url = "",
            events_url = "",
            fork = false,
            forks = 0,
            forks_count = 0,
            forks_url = "",
            full_name = "",
            git_commits_url = "",
            git_refs_url = "",
            git_tags_url = "",
            git_url = "",
            has_downloads = false,
            has_issues = false,
            has_pages = false,
            has_projects = false,
            has_wiki = false,
            homepage = "",
            hooks_url = "",
            html_url = "",
            id = 1,
            issue_comment_url = "",
            issue_events_url = "",
            issues_url = "",
            keys_url = "",
            labels_url = "",
            language = Any(),
            languages_url = "",
            license = Any(),
            merges_url = "",
            milestones_url = "",
            mirror_url = Any(),
            name = "Dummy Repo 1",
            node_id = "",
            notifications_url = "",
            open_issues = 0,
            open_issues_count = 0,
            owner = Owner(
                avatarUrl = "",
                events_url = "",
                followers_url = "",
                following_url = "",
                gists_url = "",
                gravatar_id = "",
                html_url = "",
                id = 0,
                login = "",
                node_id = "",
                organizations_url = "",
                received_events_url = "",
                repos_url = "",
                site_admin = false,
                starred_url = "",
                subscriptions_url = "",
                type = "",
                url = ""
            ),
            permissions = Permissions(
                admin = false,
                pull = false,
                push = false
            ),
            private = false,
            pulls_url = "",
            pushed_at = "",
            releases_url = "",
            size = 0,
            ssh_url = "",
            stargazers_count = 0,
            stargazers_url = "",
            statuses_url = "",
            subscribers_url = "",
            subscription_url = "",
            svn_url = "",
            tags_url = "",
            teams_url = "",
            trees_url = "",
            updated_at = "",
            url = "",
            watchers = 0,
            watchers_count = 0
        )

        val dummyRepo2 = GitHubRepo(
            archive_url = "",
            archived = false,
            assignees_url = "",
            blobs_url = "",
            branches_url = "",
            clone_url = "",
            collaborators_url = "",
            comments_url = "",
            commits_url = "",
            compare_url = "",
            contents_url = "",
            contributors_url = "",
            created_at = "",
            default_branch = "",
            deployments_url = "",
            description = "No description",
            disabled = false,
            downloads_url = "",
            events_url = "",
            fork = false,
            forks = 0,
            forks_count = 0,
            forks_url = "",
            full_name = "",
            git_commits_url = "",
            git_refs_url = "",
            git_tags_url = "",
            git_url = "",
            has_downloads = false,
            has_issues = false,
            has_pages = false,
            has_projects = false,
            has_wiki = false,
            homepage = "",
            hooks_url = "",
            html_url = "",
            id = 2,
            issue_comment_url = "",
            issue_events_url = "",
            issues_url = "",
            keys_url = "",
            labels_url = "",
            language = Any(),
            languages_url = "",
            license = Any(),
            merges_url = "",
            milestones_url = "",
            mirror_url = Any(),
            name = "Dummy Repo 2",
            node_id = "",
            notifications_url = "",
            open_issues = 0,
            open_issues_count = 0,
            owner = Owner(
                avatarUrl = "",
                events_url = "",
                followers_url = "",
                following_url = "",
                gists_url = "",
                gravatar_id = "",
                html_url = "",
                id = 0,
                login = "",
                node_id = "",
                organizations_url = "",
                received_events_url = "",
                repos_url = "",
                site_admin = false,
                starred_url = "",
                subscriptions_url = "",
                type = "",
                url = ""
            ),
            permissions = Permissions(
                admin = false,
                pull = false,
                push = false
            ),
            private = false,
            pulls_url = "",
            pushed_at = "",
            releases_url = "",
            size = 0,
            ssh_url = "",
            stargazers_count = 0,
            stargazers_url = "",
            statuses_url = "",
            subscribers_url = "",
            subscription_url = "",
            svn_url = "",
            tags_url = "",
            teams_url = "",
            trees_url = "",
            updated_at = "",
            url = "",
            watchers = 0,
            watchers_count = 0
        )
    }
}

data class Owner(
    @SerializedName("avatar_url")
    val avatarUrl: String,
    val events_url: String,
    val followers_url: String,
    val following_url: String,
    val gists_url: String,
    val gravatar_id: String,
    val html_url: String,
    val id: Int,
    val login: String,
    val node_id: String,
    val organizations_url: String,
    val received_events_url: String,
    val repos_url: String,
    val site_admin: Boolean,
    val starred_url: String,
    val subscriptions_url: String,
    val type: String,
    val url: String
)

data class Permissions(
    val admin: Boolean,
    val pull: Boolean,
    val push: Boolean
)